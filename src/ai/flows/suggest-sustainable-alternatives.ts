// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Suggests sustainable alternative products based on an initial product query.
 *
 * - suggestSustainableAlternatives - A function that suggests sustainable alternatives.
 * - SuggestSustainableAlternativesInput - The input type for the suggestSustainableAlternatives function.
 * - SuggestSustainableAlternativesOutput - The return type for the suggestSustainableAlternatives function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestSustainableAlternativesInputSchema = z.object({
  productQuery: z
    .string()
    .describe('The initial product query from the user.'),
  environmentalImpactScore: z.number().describe('The environmental impact score of the initial product.'),
  breakdown: z.string().describe('A detailed breakdown of the environmental impact score.'),
});
export type SuggestSustainableAlternativesInput = z.infer<
  typeof SuggestSustainableAlternativesInputSchema
>;

const SuggestSustainableAlternativesOutputSchema = z.object({
  alternatives: z
    .array(z.string())
    .describe('A list of more sustainable alternative products.'),
  reasoning: z.string().describe('The reasoning behind the suggested alternatives.'),
});
export type SuggestSustainableAlternativesOutput = z.infer<
  typeof SuggestSustainableAlternativesOutputSchema
>;

export async function suggestSustainableAlternatives(
  input: SuggestSustainableAlternativesInput
): Promise<SuggestSustainableAlternativesOutput> {
  return suggestSustainableAlternativesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestSustainableAlternativesPrompt',
  input: {schema: SuggestSustainableAlternativesInputSchema},
  output: {schema: SuggestSustainableAlternativesOutputSchema},
  prompt: `You are an AI assistant that suggests more sustainable alternative products based on an initial product query and its environmental impact assessment.

  Product Query: {{{productQuery}}}
  Environmental Impact Score: {{{environmentalImpactScore}}}
  Breakdown: {{{breakdown}}}

  Suggest at least three sustainable alternatives and provide a brief reasoning for each suggestion.
  Format your response as a JSON object with "alternatives" and "reasoning" fields.
  The alternatives field is a list of strings.
`,
});

const suggestSustainableAlternativesFlow = ai.defineFlow(
  {
    name: 'suggestSustainableAlternativesFlow',
    inputSchema: SuggestSustainableAlternativesInputSchema,
    outputSchema: SuggestSustainableAlternativesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
